TOKEN_FILE := .auth_token
COMPOSE := docker compose -f infra/docker/docker-compose.yml

.PHONY: auth-login auth-me auth-refresh auth-logout show-token

auth-login:
	@curl -s -X POST http://localhost:8000/api/auth/otp/request \
	  -H 'content-type: application/json' \
	  -d '{"email":"tester@vakta.ai"}' | jq .
	@CODE=`$(COMPOSE) exec -T redis redis-cli GET otp:tester@vakta.ai | tr -d '\r\n"'`; \
	  TOKEN=`curl -s -X POST http://localhost:8000/api/auth/otp/verify \
	    -H 'content-type: application/json' \
	    -d "$$(printf '{"'"email"'":"'"tester@vakta.ai"'","'"code"'":"%s"}' "$$CODE")" | jq -r .access_token`; \
	  echo $$TOKEN > $(TOKEN_FILE); \
	  printf "Saved token to $(TOKEN_FILE)\nTOKEN starts: %s...\n" "`echo $$TOKEN | cut -c1-24`"

# auto-load token from file if present
TOKEN ?= $(shell cat $(TOKEN_FILE) 2>/dev/null)

auth-me:
	@test -n "$(TOKEN)" || (echo "Set TOKEN=... or run 'make auth-login'"; exit 1)
	@curl -s http://localhost:8000/api/auth/me -H "Authorization: Bearer $(TOKEN)" | jq .

auth-refresh:
	@test -n "$(TOKEN)" || (echo "Set TOKEN=... or run 'make auth-login'"; exit 1)
	@NEW=$$(curl -s -X POST http://localhost:8000/api/auth/refresh -H "Authorization: Bearer $(TOKEN)" | jq -r .access_token); \
	  echo $$NEW > $(TOKEN_FILE); \
	  printf "Refreshed. Saved to $(TOKEN_FILE)\nNEW starts: %s...\n" "`echo $$NEW | cut -c1-24`"

auth-logout:
	@test -n "$(TOKEN)" || (echo "Set TOKEN=... or run 'make auth-login'"; exit 1)
	@curl -s -X POST http://localhost:8000/api/auth/logout -H "Authorization: Bearer $(TOKEN)" | jq .
	@rm -f $(TOKEN_FILE) && echo "Removed $(TOKEN_FILE)"

.PHONY: chat-ping explore-tempo

# Use saved token from .auth_token (created by auth-login / auth-refresh)
TOKEN ?= $(shell cat .auth_token 2>/dev/null)

chat-ping:
	@test -n "$(TOKEN)" || (echo "Set TOKEN=... or run 'make auth-login'"; exit 1)
	@curl -s -X POST http://localhost:8000/api/v1/chat/message \
	  -H "Authorization: Bearer $(TOKEN)" \
	  -H 'content-type: application/json' \
	  -d '{"message":"Hello from client"}' | jq .

explore-tempo:
	@open 'http://localhost:3000/explore?left={"datasource":"tempo","queries":[{"query":"{ service.name = \"vakta-api\" }"}],"range":{"from":"now-30m","to":"now"}}'
.PHONY: ws-file ws-mic

ws-file:
	@WS_URL="ws://localhost:8000/ws/audio?token=$$(tr -d '\r\n' < .auth_token)" \

ws-mic:
	@[ -n "$$SD_INPUT_DEVICE" ] || (echo "export SD_INPUT_DEVICE=<index>"; exit 1)
	@WS_URL="ws://localhost:8000/ws/audio?token=$$(tr -d '\r\n' < .auth_token)" \
	python3 ws_mic_to_server.py 3

# --- WS smoke defaults (can be overridden on CLI) ---
WS_URL ?= ws://127.0.0.1:8000/ws/audio
WS_WAV ?= test_16k.wav
WS_RECV_TIMEOUT ?= 90
WS_OPEN ?= 0
# WS_BEARER_TOKEN can be set from shell when auth is on

.PHONY: ws-smoke
ws-smoke:
	@echo "WS_URL=$(WS_URL)"
	@WS_URL="$(WS_URL)" WS_WAV="$(WS_WAV)" WS_RECV_TIMEOUT="$(WS_RECV_TIMEOUT)" WS_OPEN="$(WS_OPEN)" WS_BEARER_TOKEN="$(WS_BEARER_TOKEN)" python3 scripts/ws_smoke.py

# ===== WS AUTH/OTP helpers =====
API_HOST ?= 127.0.0.1:8000
WS_URL   ?= ws://127.0.0.1:8000/ws/audio
WS_WAV   ?= test_16k.wav
WS_RECV_TIMEOUT ?= 90
WS_OPEN ?= 0

.PHONY: ws-auth-off ws-auth-on ws-otp-request ws-otp-verify ws-smoke-auth

ws-auth-off:
	@printf "services:\n  api:\n    environment:\n      WS_AUTH_REQUIRED: \"0\"\n      OTEL_SDK_DISABLED: \"true\"\n      OTEL_TRACES_EXPORTER: \"none\"\n      OTEL_EXPORTER_OTLP_ENDPOINT: \"\"\n" > infra/docker/docker-compose.override.yml
	@docker compose -f infra/docker/docker-compose.yml -f infra/docker/docker-compose.override.yml up -d --build --force-recreate --no-deps api
	@echo "WS auth: OFF"

ws-auth-on:
	@printf "services:\n  api:\n    environment:\n      WS_AUTH_REQUIRED: \"1\"\n      OTEL_SDK_DISABLED: \"true\"\n      OTEL_TRACES_EXPORTER: \"none\"\n      OTEL_EXPORTER_OTLP_ENDPOINT: \"\"\n" > infra/docker/docker-compose.override.yml
	@docker compose -f infra/docker/docker-compose.yml -f infra/docker/docker-compose.override.yml up -d --build --force-recreate --no-deps api
	@echo "WS auth: ON"

# usage: EMAIL=you@vakta.ai make ws-otp-request
ws-smoke-auth:
	@test -f .auth_token || (echo ".auth_token not found. Run ws-otp-request + ws-otp-verify."; exit 3)
	@WS_URL="$(WS_URL)" WS_WAV="$(WS_WAV)" WS_RECV_TIMEOUT="$(WS_RECV_TIMEOUT)" WS_OPEN="$(WS_OPEN)" \
	  WS_BEARER_TOKEN="$$(tr -d '\r\n' < .auth_token)" \
	  python3 scripts/ws_smoke.py
.PHONY: smoke-ws
EMAIL ?= tester@vakta.ai

ws-otp-request:
	@test -n "$(EMAIL)" || (echo "Set EMAIL=..."; exit 2)
	@curl -s -X POST http://$(API_HOST)/api/auth/otp/request \
	  -H 'content-type: application/json' \
	  -d '{"email":"$(EMAIL)"}' >/dev/null && echo "OTP sent to $(EMAIL)"

smoke-ws:
	EMAIL=$(EMAIL) ./ws_smoke.sh
# --- end append ---

.PHONY: smoke-ws
smoke-ws:
	EMAIL=$(EMAIL) ./ws_smoke.sh
