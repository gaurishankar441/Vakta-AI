from app.routers.auth_otp import router as otp_router
from .routers import echofrom .routers import auth_otpfrom fastapi import FastAPIfrom prometheus_fastapi_instrumentator import Instrumentatorfrom starlette_exporter import PrometheusMiddlewarefrom fastapi.middleware.cors import CORSMiddlewareapp = FastAPI(title="Vakta API")# --- Prometheus request metrics ---# emits: starlette_requests_total, starlette_requests_latency_seconds_bucket, etc.app.add_middleware(    PrometheusMiddleware,    app_name="vakta-api",    group_paths=True,    buckets=(0.005,0.01,0.025,0.05,0.1,0.25,0.5,1.0,2.5,5.0))# ---- metrics middleware ----# Emits: starlette_requests_total, starlette_requests_latency_seconds_bucket, etc.app.add_middleware(    PrometheusMiddleware,    app_name="vakta-api",    group_paths=True,               # collapse path IDs to templated routes    prefix="",                      # no extra prefix in metric names    buckets=(0.005,0.01,0.025,0.05,0.1,0.25,0.5,1.0,2.5,5.0))# NOTE: We already expose /api/metrics via our router; the middleware just populates the registry.app.add_middleware(    CORSMiddleware,    allow_origins=["*"],    allow_methods=["*"],    allow_headers=["*"],    allow_credentials=True,)def _try_import_router(path, attr="router"):    try:        mod = __import__(path, fromlist=[attr])        r = getattr(mod, attr)        print(f"[boot] mounted: {path}", flush=True)        return r    except Exception as e:        print(f"[boot] SKIP {path}: {e}", flush=True)        return None# Optional HTTP routersr_health  = _try_import_router("app.routers.health")r_metrics = _try_import_router("app.routers.metrics")r_auth    = _try_import_router("app.routers.auth")r_chat    = _try_import_router("app.routers.chat")if r_health:  app.include_router(r_health)if r_metrics: app.include_router(r_metrics)if r_auth:    app.include_router(r_auth)if r_chat:    app.include_router(r_chat)# WebSocket router we care aboutr_ws_audio = _try_import_router("app.routers.ws_audio")if r_ws_audio:    app.include_router(r_ws_audio)from starlette.routing import WebSocketRoute@app.on_event("startup")async def _on_startup():    ws_routes = [(r.path, getattr(r.endpoint,"__module__", "unknown"))                 for r in app.router.routes if isinstance(r, WebSocketRoute)]    print(f"[boot] WS routes: {ws_routes}", flush=True)# Health (fallback so health always exists)@app.get("/api/health")async def health():    return {"ok": True}app.include_router(auth_otp.router, tags=["auth-otp"])app.include_router(echo.router, tags=["echo"])Instrumentator().instrument(app)# metrics endpoint already at /api/metrics# --- OpenTelemetry (minimal programmatic setup) ---import osfrom opentelemetry import tracefrom opentelemetry.sdk.resources import Resourcefrom opentelemetry.sdk.trace import TracerProviderfrom opentelemetry.sdk.trace.export import BatchSpanProcessorfrom opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporterfrom opentelemetry.instrumentation.fastapi import FastAPIInstrumentor# Ensure default envs if not setos.environ.setdefault("OTEL_SERVICE_NAME", "vakta-api")os.environ.setdefault("OTEL_EXPORTER_OTLP_ENDPOINT", "http://tempo:4317")os.environ.setdefault("OTEL_EXPORTER_OTLP_PROTOCOL", "grpc")os.environ.setdefault("OTEL_EXPORTER_OTLP_INSECURE", "true")# Provider + exporter_provider = TracerProvider(resource=Resource.create({"service.name": os.environ["OTEL_SERVICE_NAME"]}))_exporter = OTLPSpanExporter(endpoint=os.environ["OTEL_EXPORTER_OTLP_ENDPOINT"], insecure=True)_provider.add_span_processor(BatchSpanProcessor(_exporter))trace.set_tracer_provider(_provider)# Instrument FastAPItry:    FastAPIInstrumentor.instrument_app(app)except Exception as _e:    # Safe-guard: app might be created later in some layouts    pass
