services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: vakta
      POSTGRES_PASSWORD: vakta
      POSTGRES_DB: vakta
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vakta || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
  api:
    build:
      context: ../.. # << repo root as build context
      dockerfile: infra/docker/Dockerfile.api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Use psycopg v3 driver (already in requirements)
      DATABASE_URL: postgresql+psycopg://vakta:vakta@postgres:5432/vakta
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET: dev-secret-change-me
      JWT_EXP_MIN: "60"
    ports:
      - "8000:8000"
    healthcheck:
      # python-based check: no curl needed in image
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:8000/api/health',timeout=3).status==200 else sys.exit(1)\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    env_file:
      - .env
  worker:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.worker
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    depends_on:
      redis:
        condition: service_healthy
        required: true
  minio:
    image: minio/minio:latest
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      WS_AUTH_REQUIRED: "0"
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_ROOT_USER: vakta
      MINIO_ROOT_PASSWORD: vakta123
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    command: server /data --console-address ":9001"
    volumes:
      - type: volume
        source: minio_data
        target: /data
  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
  grafana:
    image: grafana/grafana:10.4.9
    ports:
      - 3000:3000
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
volumes:
  pgdata:
  minio_data: {}
  prometheus_data: {}
